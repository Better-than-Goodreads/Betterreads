basePath: /
definitions:
  errors.ErrorDetails:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  errors.ErrorDetailsWithParams:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      validation_errors:
        items:
          $ref: '#/definitions/errors.ErrorParam'
        type: array
    type: object
  errors.ErrorParam:
    properties:
      field:
        type: string
      reason:
        type: string
    type: object
  models.Book:
    properties:
      amount_of_pages:
        type: integer
      author:
        type: string
      avg_rating:
        type: number
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      language:
        type: string
      publication_date:
        type: string
      title:
        type: string
      total_ratings:
        type: integer
    required:
    - amount_of_pages
    - author
    - description
    - genres
    - id
    - language
    - publication_date
    - title
    type: object
  models.NewBookRequest:
    properties:
      amount_of_pages:
        type: integer
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      language:
        type: string
      publication_date:
        type: string
      title:
        type: string
    required:
    - amount_of_pages
    - description
    - genres
    - language
    - publication_date
    - title
    type: object
  models.NewRatingRequest:
    properties:
      rating:
        type: integer
    required:
    - rating
    type: object
  models.RatingResponse:
    properties:
      book_id:
        type: string
      rating:
        type: integer
    type: object
  models.UserAdditionalRequest:
    properties:
      about_me:
        type: string
      age:
        type: integer
      gender:
        type: string
      location:
        type: string
      profile_picture:
        items:
          type: integer
        type: array
    type: object
  models.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      about_me:
        type: string
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      location:
        type: string
      profile_picture:
        items:
          type: integer
        type: array
      username:
        type: string
    type: object
  models.UserStageRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.UserStageResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id_register:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a  server for Swagger with Gin.
  title: BetterReads API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: publishes a book
      parameters:
      - description: Book Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: publish a book
      tags:
      - books
  /books/{id}:
    get:
      description: Get book id, note that its a UUID
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get book by id
      tags:
      - books
  /books/{id}/rating:
    delete:
      description: Delete rating of a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Delete rating of a book
      tags:
      - books
    get:
      description: Get rating of a book by user
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RatingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get rating of a book by user
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Rate a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      - description: Rating Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Rate a book
      tags:
      - books
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      description: Get user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get user by id
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user and return a JWT
      parameters:
      - description: User login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Log in a user
      tags:
      - users
  /users/register/{id}/additional-info:
    post:
      consumes:
      - application/json
      description: Register second step
      parameters:
      - description: User register id
        in: path
        name: id
        required: true
        type: string
      - description: User additional request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserAdditionalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Register second step
      tags:
      - users
  /users/register/basic:
    post:
      consumes:
      - application/json
      description: Register first step
      parameters:
      - description: User stage request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserStageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserStageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Register first step
      tags:
      - users
swagger: "2.0"
