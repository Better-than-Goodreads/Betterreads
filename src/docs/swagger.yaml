basePath: /
definitions:
  errors.ErrorDetails:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        description: ESTE NO IRIA MAS
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  errors.ErrorDetailsWithParams:
    properties:
      detail:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      validation_errors:
        items:
          $ref: '#/definitions/errors.ErrorParam'
        type: array
    type: object
  errors.ErrorParam:
    properties:
      field:
        type: string
      reason:
        type: string
    type: object
  model.CommunityResponse:
    properties:
      description:
        type: string
      id:
        type: string
      joined:
        type: boolean
      name:
        type: string
      owner_id:
        type: string
    type: object
  model.NewCommunityRequest:
    properties:
      description:
        type: string
      name:
        type: string
      picture:
        items:
          type: integer
        type: array
    required:
    - description
    - name
    type: object
  model.RecommendationsByGenre:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      genre:
        type: string
    type: object
  models.Book:
    properties:
      amount_of_pages:
        type: integer
      author:
        type: string
      author_name:
        type: string
      avg_rating:
        type: number
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      language:
        type: string
      publication_date:
        type: string
      title:
        type: string
      total_ratings:
        type: integer
    required:
    - amount_of_pages
    - author
    - author_name
    - description
    - genres
    - id
    - language
    - publication_date
    - title
    type: object
  models.BookInShelfResponse:
    properties:
      author:
        type: string
      author_name:
        type: string
      avg_ratings:
        type: number
      book_id:
        type: string
      date_added:
        type: string
      status:
        type: string
      title:
        type: string
      total_ratings:
        type: integer
      user_rating:
        type: integer
      user_review:
        type: string
    type: object
  models.BookResponse:
    properties:
      amount_of_pages:
        type: integer
      author_id:
        type: string
      author_name:
        type: string
      avg_rating:
        type: number
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      id:
        type: string
      language:
        type: string
      publication_date:
        type: string
      title:
        type: string
      total_ratings:
        type: integer
    type: object
  models.BookResponseWithReview:
    properties:
      book:
        $ref: '#/definitions/models.BookResponse'
      review:
        $ref: '#/definitions/models.Review'
      status:
        type: string
    type: object
  models.BookShelfRequest:
    properties:
      book_id:
        type: string
      status:
        type: string
    required:
    - book_id
    - status
    type: object
  models.NewBookRequest:
    properties:
      amount_of_pages:
        type: integer
      description:
        type: string
      genres:
        items:
          type: string
        type: array
      language:
        type: string
      picture:
        items:
          type: integer
        type: array
      publication_date:
        type: string
      title:
        type: string
    required:
    - amount_of_pages
    - description
    - genres
    - language
    - publication_date
    - title
    type: object
  models.NewRatingRequest:
    properties:
      rating:
        type: integer
    required:
    - rating
    type: object
  models.NewReviewRequest:
    properties:
      rating:
        type: integer
      review:
        type: string
    required:
    - rating
    type: object
  models.Post:
    properties:
      book_author:
        type: string
      book_description:
        type: string
      book_id:
        type: string
      book_title:
        type: string
      id:
        type: string
      publication_date:
        type: string
      rating:
        description: |-
          Ratings can be null to have the two posts.
          - The publication of a book
          - The rating of a book
        type: integer
      username:
        type: string
    type: object
  models.PostDTO:
    properties:
      post:
        $ref: '#/definitions/models.Post'
      type:
        type: string
    type: object
  models.Review:
    properties:
      rating:
        type: integer
      review:
        type: string
    type: object
  models.ReviewOfBook:
    properties:
      publication_date:
        type: string
      rating:
        type: integer
      review:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  models.ReviewOfUser:
    properties:
      book_id:
        type: string
      book_title:
        type: string
      publication_date:
        type: string
      rating:
        type: integer
      review:
        type: string
    type: object
  models.UserAdditionalRequest:
    properties:
      about_me:
        type: string
      age:
        type: integer
      gender:
        type: string
      location:
        type: string
    type: object
  models.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      about_me:
        type: string
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      location:
        type: string
      username:
        type: string
    type: object
  models.UserStageRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.UserStageResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id_register:
        type: string
      is_author:
        type: boolean
      last_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a  server for Swagger with Gin.
  title: BetterReads API
  version: "1.0"
paths:
  /books:
    post:
      consumes:
      - multipart/form-data
      description: publishes a book, the book data should follow the models.NewBookRequest
        in JSON
      parameters:
      - description: Book Data
        in: formData
        name: data
        required: true
        type: string
      - description: Book Picture
        in: formData
        name: file
        required: true
        type: file
      - description: Don't need to send this in json, this param is only here to reference
          NewBookRequest, DONT SEND PICTURE in JSON
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/models.NewBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: publish a book
      tags:
      - books
  /books/{id}/info:
    get:
      description: Get book id, note that its a UUID
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookResponseWithReview'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get book by id
      tags:
      - books
  /books/{id}/picture:
    get:
      description: Get book id, note that its a UUID
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get book picture by id
      tags:
      - books
  /books/{id}/rating:
    post:
      consumes:
      - application/json
      description: Rate a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      - description: Rating Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Rate a book
      tags:
      - books
    put:
      description: Update rating of a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      - description: Rating Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewRatingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Update rating of a book
      tags:
      - books
  /books/{id}/review:
    get:
      description: Get reviews of a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReviewOfBook'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
      summary: Gets reviews of a book
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add review to a book
      parameters:
      - description: Book Id
        in: path
        name: id
        required: true
        type: string
      - description: Review Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.NewReviewRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Add review to a book
      tags:
      - books
  /books/author/{id}:
    get:
      description: Get the books of an author, if no books found returns an empty
        array
      parameters:
      - description: Author Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookResponseWithReview'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get books of an auther
      tags:
      - books
  /books/genres:
    get:
      description: Get all genres
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get all genres
      tags:
      - books
  /books/info:
    get:
      consumes:
      - application/json
      description: Get all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookResponseWithReview'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get all books
      tags:
      - books
  /books/info/search:
    get:
      description: Get books by name, filters by genre and also sorts, if no books
        found returns an empty array
      parameters:
      - description: Book Name
        in: query
        name: name
        required: true
        type: string
      - description: Book Genre
        in: query
        name: genre
        type: string
      - description: Sort by publication_date, total_ratings, avg_rating
        in: query
        name: sort
        type: string
      - description: Sort direction asc or desc
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookResponseWithReview'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get books by name
      tags:
      - books
  /books/user/{id}/reviews:
    get:
      description: Get all reviews of a user
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReviewOfUser'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
      summary: Gets all reviews of a user
      tags:
      - books
  /communities:
    get:
      consumes:
      - application/json
      description: Get all communities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.CommunityResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all communities
      tags:
      - communities
    post:
      consumes:
      - multipart/form-data
      description: creates a community, the community data should follow the model.NewCommunityRequest
        in JSON
      parameters:
      - description: Community Data
        in: formData
        name: data
        required: true
        type: string
      - description: Community Picture
        in: formData
        name: file
        required: true
        type: file
      - description: Don't need to send this in json, this param is only here to reference
          NewCommunityRequest, DONT SEND PICTURE in JSON
        in: body
        name: community
        required: true
        schema:
          $ref: '#/definitions/model.NewCommunityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CommunityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: creates a community
      tags:
      - communities
  /communities/{id}/join:
    post:
      consumes:
      - application/json
      description: Join a community
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Join a community
      tags:
      - communities
  /communities/{id}/picture:
    get:
      description: Get community picture
      parameters:
      - description: Community id
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get Community picture
      tags:
      - communities
  /communities/{id}/users:
    get:
      consumes:
      - application/json
      description: Get all users in a community
      parameters:
      - description: Community ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserStageResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all users in a community
      tags:
      - communities
  /feed:
    get:
      description: 'Get feed. The type of posts can be : ["post", "rating"]'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostDTO'
            type: array
      summary: Get feed of an user
      tags:
      - feed
  /recommendations:
    get:
      consumes:
      - application/json
      description: Get recommendations for an user based on his top 3 genres. It gets
        you 5 books for each genre if available.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.RecommendationsByGenre'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get recommendations for an user based on his top 3 genres.
      tags:
      - recommendations
  /recommendations/friends:
    get:
      description: Get recommendations for an user based on his friends. It gets you
        all friends books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get recommendations for an user based on his friends.
      tags:
      - recommendations
  /recommendations/more:
    get:
      consumes:
      - application/json
      description: Get more recommendations for an specific genre. May want to use
        it after GetMoreRecommendations, it gets you 20 books if available for the
        specific genre
      parameters:
      - description: Genre
        in: query
        name: genre
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get more recommendations for an specific genre.
      tags:
      - recommendations
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      description: Get user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get user by id
      tags:
      - users
  /users/{id}/friends:
    get:
      description: Get Friends of user logged in
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserResponse'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get Friends
      tags:
      - Friends
  /users/{id}/picture:
    get:
      description: Get user picture
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - image/jpeg
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get user picture
      tags:
      - users
  /users/{id}/shelf/search:
    get:
      description: Search books in shelf of an user. The search can be filtered by
        genre, sorted by avg_ratings, total_ratings and date. The direction can be
        asc or desc.
      parameters:
      - description: 'Shelf Type: all, read, plan-to-read, reading '
        in: query
        name: status
        required: true
        type: string
      - description: Book Genre
        in: query
        name: genre
        type: string
      - description: Sort by publication_date, total_ratings, avg_rating
        in: query
        name: sort
        type: string
      - description: Sort direction asc or desc
        in: query
        name: direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookInShelfResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Search books in shelf of an user
      tags:
      - bookshelf
  /users/{userId}/shelf:
    get:
      description: Get bookshelf of an user
      operationId: get-book
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Shelf Type
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BookInShelfResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get bookshelf of an user
      tags:
      - bookshelf
  /users/friends:
    delete:
      description: Delete Friend from user logged in
      parameters:
      - description: Friend ID
        in: query
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Delete a friend
      tags:
      - Friends
    post:
      description: Add Friend to user logged in
      parameters:
      - description: Friend ID
        in: query
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Add a friend
      tags:
      - Friends
  /users/friends/requests:
    delete:
      description: Reject Friend Request from
      parameters:
      - description: Friend ID
        in: query
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Reject a friend request
      tags:
      - Friends
    post:
      description: Accept Friend Request from user logged in
      parameters:
      - description: Friend ID
        in: query
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Accept a friend request
      tags:
      - Friends
  /users/friends/requests/received:
    get:
      description: Get Friends Request Received
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get Friends Request Received
      tags:
      - Friends
  /users/friends/requests/sent:
    get:
      description: Get Friends Request Sent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/models.UserResponse'
              type: array
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Get Friends Request Sent
      tags:
      - Friends
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user and return a JWT
      parameters:
      - description: User login request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Log in a user
      tags:
      - users
  /users/picture:
    post:
      consumes:
      - multipart/form-data
      description: Post a picture
      parameters:
      - description: User picture
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Post a picture
      tags:
      - users
  /users/register/{id}/additional-info:
    post:
      consumes:
      - application/json
      description: Register second step
      parameters:
      - description: User register id
        in: path
        name: id
        required: true
        type: string
      - description: User additional request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserAdditionalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Register second step
      tags:
      - users
  /users/register/basic:
    post:
      consumes:
      - application/json
      description: Register first step
      parameters:
      - description: User stage request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserStageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserStageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Register first step
      tags:
      - users
  /users/search:
    get:
      consumes:
      - application/json
      description: Search users
      parameters:
      - description: User name
        in: query
        name: name
        type: string
      - description: Is author
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Search users
      tags:
      - users
  /users/shelf:
    delete:
      description: Delete book from shelf
      operationId: delete-book
      parameters:
      - description: Book ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Delete book from shelf
      tags:
      - bookshelf
    post:
      consumes:
      - application/json
      description: Add book to shelf
      operationId: add-book
      parameters:
      - description: Bookshelf entry
        in: body
        name: bookShelfEntry
        required: true
        schema:
          $ref: '#/definitions/models.BookShelfRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetailsWithParams'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Add book to shelf
      tags:
      - bookshelf
    put:
      consumes:
      - application/json
      description: Edit book in shelf
      operationId: edit-book
      parameters:
      - description: Bookshelf entry
        in: body
        name: bookShelfEntry
        required: true
        schema:
          $ref: '#/definitions/models.BookShelfRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorDetails'
      summary: Edit book in shelf
      tags:
      - bookshelf
swagger: "2.0"
